% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ergmito.R
\name{ergmito}
\alias{ergmito}
\alias{vcov.ergmito}
\title{Estimation of ERGMs using Maximum Likelihood Estimation (MLE)}
\usage{
ergmito(
  model,
  gattr_model = NULL,
  stats.weights = NULL,
  stats.statmat = NULL,
  optim.args = list(),
  init = NULL,
  use.grad = TRUE,
  target.stats = NULL,
  ntries = 1L,
  keep.stats = TRUE,
  offset = NULL,
  ...
)

\method{vcov}{ergmito}(object, solver = NULL, ...)
}
\arguments{
\item{model}{Model to estimate. See \link[ergm:ergm]{ergm::ergm}. The only difference with
\code{ergm} is that the LHS can be a list of networks.}

\item{gattr_model}{A formula. Model specification for graph attributes. This
is useful when using multiple networks.}

\item{stats.weights}{Either an integer vector or a list of integer vectors (see \link{exact_loglik}).}

\item{stats.statmat}{Either a matrix or a list of matrices (see \link{exact_loglik}).}

\item{optim.args}{List. Passed to \link[stats:optim]{stats::optim}.}

\item{init}{A numeric vector. Sets the starting parameters for the
optimization routine. Default is a vector of zeros.}

\item{use.grad}{Logical. When \code{TRUE} passes the gradient function to \code{optim}.
This is intended for testing only (internal use).}

\item{target.stats}{A matrix of target statistics (see \link[ergm:ergm]{ergm::ergm}).}

\item{ntries}{Integer scalar. Number of tries to estimate the MLE (see details).}

\item{keep.stats}{Logical scalar. When \code{TRUE} (the default), the matrices
and vectors associated with the sufficient statistics will be returned.
Otherwise the function discards them. This may be useful for saving memory
space when estimating multiple models.}

\item{offset}{Named numeric vector. Terms to be treated as offset and their values
(see details in \code{\link[=ergmito]{ergmito()}}).}

\item{...}{Further arguments passed to the method. In the case of \code{ergmito},
\code{...} are passed to \link{ergmito_formulae}.}

\item{object}{An object of class \code{ergmito}}

\item{solver}{Function. Used to compute the inverse of the hessian matrix. When
not null, the variance-covariance matrix is recomputed using that function.
By default, \code{ergmito} uses \link[MASS:ginv]{MASS::ginv}.}
}
\value{
An list of class \code{ergmito}:
\itemize{
\item \code{call}          The program call.
\item \code{coef}          Named vector. Parameter estimates.
\item \code{iterations}    Integer. Number of times the log-likelihood was evaluated
(see \link[stats:optim]{stats::optim}).
\item \code{mle.lik}       Numeric. Final value of the objective function.
\item \code{null.lik}      Numeric. Final value of the objective function for the null model.
\item \code{covar}         Square matrix of size \code{length(coef)}. Variance-covariance matrix
computed using the exact hessian as implemented in \link{exact_hessian}.
\item \code{coef.init}     Named vector of length \code{length(coef)}. Initial set of parameters
used in the optimization.
\item \code{formulae}      An object of class \link[=ergmito_formulae]{ergmito_loglik}.
\item \code{offset}        The offset argument passed to \code{ergmito}.
\item \code{nobs}          Integer scalar. Number of networks in the model.
\item \code{network}       Networks passed via \code{model}.
\item \code{optim.out},\code{optim.args} Results from the optim call and arguments passed to it.
\item \code{status},\code{note} Convergence code. See \link{check_convergence}
\item \code{best_try}      Integer scalar. Index of the run with the highest log-likelihood value.
\item \code{history}       Matrix of size \code{ntries * (k + 1)}. History of the parameter
estimates and the reached log-likelihood values.
\item \code{timer}         Vector of times (for benchmarking). Each unit marks the starting
point of the step.
}

Methods \code{\link[base:print]{base::print()}}, \code{\link[base:summary]{base::summary()}}, \code{\link[stats:coef]{stats::coef()}}, \code{\link[stats:logLik]{stats::logLik()}},
\code{\link[stats:nobs]{stats::nobs()}}, \code{\link[stats:vcov]{stats::vcov()}}, \code{\link[stats:AIC]{stats::AIC()}}, \code{\link[stats:BIC]{stats::BIC()}},
\code{\link[stats:confint]{stats::confint()}}, and  \code{\link[stats:formula]{stats::formula()}} are available.
}
\description{
As a difference from \link[ergm:ergm]{ergm}, \code{ergmito} uses the exact log-likelihood
function for fitting the model. This implies that all the \code{2^(n*(n-1))}
graphs are enumerated for computing the normalizing constant of the ERGM
model. As a rule of thumb, directed graphs with more than 5 vertices
should not be fitted using MLE, but instead MC-MLE as implemented in the
ergm package. The same applies for un-directed graphs with more than 8
vertices. The workhorse function of \code{ergmito} is ERGM's
\code{\link[ergm:ergm.allstats]{ergm::ergm.allstats()}}.
}
\details{
The support of the sufficient statistics is calculated using ERGM's
\code{\link[ergm:ergm.allstats]{ergm::ergm.allstats()}} function.
}
\section{MLE}{


Maximum Likelihood Estimates are obtained using the \link[stats:optim]{stats::optim} function.
The default method for maximization is \code{BFGS} using both the log-likelihood
function and its corresponding gradient.

Another important factor to consider is the existence of the MLE estimates
As shown in Handcock (2003), if the observed statistics are near the border
if the support function (e.g. too many edges or almost none), then, even if
the MLE estimates exists, the optimization function may not be able to reach
the optima. Moreover, if the target (observed) statistics live in the boundary,
then the MLE estimates do not exists. In general, this should not be an issue
in the context of the pooled model, as the variability of observed statistics
should be enough to avoid those situations.

The function \code{ergmito} will try to identify possible cases of non-existence,
of the MLE, and if identified then try to re estimate the model parameters using
larger values than the ones obtained, if the log-likelihood is greater, then it is
assumed that the model is degenerate and the corresponding values will be
replaced with either \code{+Inf} or  \code{-Inf}. By default, this behavior is checked
anytime that the absolute value of the estimates is greater than 5, or the
sufficient statistics were flagged as potentially outside of the interior of
the support (close to zero or to its max).

In the case of \code{ntries}, the optimization is repeated that number of times,
each time perturbing the \code{init} parameter by adding a Normally distributed
vector. The result which reaches the highest log-likelihood will be the one
reported as parameter estimates. This feature is intended for testing only.
Anecdotally, \code{optim} reaches the max in the first try.
}

\section{Offset}{


The fitting can be done using offset terms. Offset terms can be specified
by passing a named vector via the \code{offset} argument. For example, if you
want to fit an ERGM with coefficient associated with edgecount fixed to -1,
you can do so by defining \code{offset = c(edges = -1)}. Offsetting terms only
affects the optimization stage.

One important caveat is that the offset is check after the sufficient
statistics have been calculated, meaning that the variable names may change,
for example, while the user can specify \code{ttriad} in the formula, after
calculating the sufficient statistics it will turn to \code{ttriples}.
}

\examples{

# Generating a small graph
set.seed(12)
n <- 4
net <- rbernoulli(n, p = .3)

model <- net ~ edges + mutual

library(ergm)
ans_ergmito <- ergmito(model)
ans_ergm  <- ergm(model)

# The ergmito should have a larger value
ergm.exact(ans_ergmito$coef, model)
ergm.exact(ans_ergm$coef, model)

summary(ans_ergmito)
summary(ans_ergm)

# Example 2: Estimating an ERGMito using data with know DGP parameters -----
data(fivenets) 

model1 <- ergmito(fivenets ~ edges + nodematch("female"))
summary(model1) # This data has know parameters equal to -2.0 and 2.0

# Example 3: Likelihood ratio test using the lmtest R package

if (require(lmtest)) {
  data(fivenets)
  model1 <- ergmito(fivenets ~ edges + nodematch("female"))
  model2 <- ergmito(fivenets ~ edges + nodematch("female") + mutual)
  
  lrtest(model1, model2)
  # Likelihood ratio test
  # 
  # Model 1: fivenets ~ edges + nodematch("female") 
  # Model 2: fivenets ~ edges + nodematch("female") + mutual
  #   #Df  LogLik Df  Chisq Pr(>Chisq)
  # 1   2 -34.671                     
  # 2   3 -34.205 1 0.9312     0.3346
}


}
\seealso{
The function \link{plot.ergmito} for post-estimation diagnostics.
}
