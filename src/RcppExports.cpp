// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "ergmito_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// count_available
CharacterVector count_available(int i);
RcppExport SEXP _ergmito_count_available(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(count_available(i));
    return rcpp_result_gen;
END_RCPP
}
// count_stats
NumericMatrix count_stats(const ListOf< IntegerMatrix >& X, const std::vector< std::string >& terms, const ListOf< NumericVector >& A);
RcppExport SEXP _ergmito_count_stats(SEXP XSEXP, SEXP termsSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const ListOf< IntegerMatrix >& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::vector< std::string >& >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< const ListOf< NumericVector >& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(count_stats(X, terms, A));
    return rcpp_result_gen;
END_RCPP
}
// exact_loglik
arma::vec exact_loglik(const arma::mat& x, const arma::colvec& params, const std::vector< arma::rowvec >& weights, const std::vector< arma::mat >& statmat, bool as_prob);
RcppExport SEXP _ergmito_exact_loglik(SEXP xSEXP, SEXP paramsSEXP, SEXP weightsSEXP, SEXP statmatSEXP, SEXP as_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::vector< arma::rowvec >& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::vector< arma::mat >& >::type statmat(statmatSEXP);
    Rcpp::traits::input_parameter< bool >::type as_prob(as_probSEXP);
    rcpp_result_gen = Rcpp::wrap(exact_loglik(x, params, weights, statmat, as_prob));
    return rcpp_result_gen;
END_RCPP
}
// exact_gradient
arma::colvec exact_gradient(const arma::mat& x, const arma::colvec& params, const std::vector< arma::rowvec >& weights, const std::vector< arma::mat >& statmat);
RcppExport SEXP _ergmito_exact_gradient(SEXP xSEXP, SEXP paramsSEXP, SEXP weightsSEXP, SEXP statmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::vector< arma::rowvec >& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::vector< arma::mat >& >::type statmat(statmatSEXP);
    rcpp_result_gen = Rcpp::wrap(exact_gradient(x, params, weights, statmat));
    return rcpp_result_gen;
END_RCPP
}
// make_sets
vecint make_sets(int n);
RcppExport SEXP _ergmito_make_sets(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(make_sets(n));
    return rcpp_result_gen;
END_RCPP
}
// powerset
SEXP powerset(int n, bool force);
RcppExport SEXP _ergmito_powerset(SEXP nSEXP, SEXP forceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type force(forceSEXP);
    rcpp_result_gen = Rcpp::wrap(powerset(n, force));
    return rcpp_result_gen;
END_RCPP
}
// print_powerset
int print_powerset(SEXP sets);
RcppExport SEXP _ergmito_print_powerset(SEXP setsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sets(setsSEXP);
    rcpp_result_gen = Rcpp::wrap(print_powerset(sets));
    return rcpp_result_gen;
END_RCPP
}
// wrap_powerset
List wrap_powerset(SEXP sets, int from, int to, int n);
RcppExport SEXP _ergmito_wrap_powerset(SEXP setsSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sets(setsSEXP);
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(wrap_powerset(sets, from, to, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ergmito_count_available", (DL_FUNC) &_ergmito_count_available, 1},
    {"_ergmito_count_stats", (DL_FUNC) &_ergmito_count_stats, 3},
    {"_ergmito_exact_loglik", (DL_FUNC) &_ergmito_exact_loglik, 5},
    {"_ergmito_exact_gradient", (DL_FUNC) &_ergmito_exact_gradient, 4},
    {"_ergmito_make_sets", (DL_FUNC) &_ergmito_make_sets, 1},
    {"_ergmito_powerset", (DL_FUNC) &_ergmito_powerset, 2},
    {"_ergmito_print_powerset", (DL_FUNC) &_ergmito_print_powerset, 1},
    {"_ergmito_wrap_powerset", (DL_FUNC) &_ergmito_wrap_powerset, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_ergmito(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
